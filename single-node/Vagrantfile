# -*- mode: ruby -*-
# # vi: set ft=ruby :

require 'fileutils'
require 'open-uri'
require 'tempfile'
require 'yaml'

Vagrant.require_version ">= 1.6.0"

CLUSTER_IP="10.3.0.1"
NODE_IP = "172.18.0.101"
NODE_MEMORY_SIZE = 2048
USER_DATA_PATH = File.expand_path("user-data")
SSL_TARBALL_PATH = File.expand_path("ssl/controller.tar")

# Detect OS
module OS
  def OS.windows?
    (/cygwin|mswin|mingw|bccwin|wince|emx/ =~ RUBY_PLATFORM) != nil
  end

  def OS.mac?
   (/darwin/ =~ RUBY_PLATFORM) != nil
  end

  def OS.unix?
    !OS.windows?
  end

  def OS.linux?
    OS.unix? and not OS.mac?
  end
end

if OS.windows?
  system("\"C:\\cygwin64\\bin\\bash.exe\" -c \"mkdir -p ssl && ./../lib/init-ssl-ca ssl\"") or abort ("failed generating SSL CA artifacts")
  system("\"C:\\cygwin64\\bin\\bash.exe\" -c \"./../lib/init-ssl ssl apiserver controller IP.1=#{NODE_IP},IP.2=#{CLUSTER_IP}\"") or abort ("failed generating SSL certificate artifacts")
  system("\"C:\\cygwin64\\bin\\bash.exe\" -c \"./../lib/init-ssl ssl admin kube-admin\"") or abort("failed generating admin SSL artifacts")
else
  system("mkdir -p ssl && ./../lib/init-ssl-ca ssl") or abort ("failed generating SSL CA artifacts")
  system("./../lib/init-ssl ssl apiserver controller IP.1=#{NODE_IP},IP.2=#{CLUSTER_IP}") or abort ("failed generating SSL certificate artifacts")
  system("./../lib/init-ssl ssl admin kube-admin") or abort("failed generating admin SSL artifacts")
end


Vagrant.configure("2") do |config|
  # always use Vagrant's insecure key
  config.ssh.insert_key = false

  config.vm.box = "coreos-alpha"
  config.vm.box_version = ">= 766.0.0"
  config.vm.box_url = "http://alpha.release.core-os.net/amd64-usr/current/coreos_production_vagrant.json"

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    config.vm.provider vmware do |v, override|
      v.vmx['numvcpus'] = 1
      v.vmx['memsize'] = NODE_MEMORY_SIZE
      v.gui = false

      override.vm.box_url = "http://alpha.release.core-os.net/amd64-usr/current/coreos_production_vagrant_vmware_fusion.json"
    end
  end

  config.vm.provider :virtualbox do |v|
    v.cpus = 1
    v.gui = false
    v.memory = NODE_MEMORY_SIZE

    # On VirtualBox, we don't have guest additions or a functional vboxsf
    # in CoreOS, so tell Vagrant that so it can be smarter.
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  config.vm.network :private_network, ip: NODE_IP

  config.vm.synced_folder "./pod-storage", "/pod-storage",
    type: "rsync",
    rsync__auto: true,
    rsync__verbose: true,
    rsync__exclude: [".git/"]

  config.vm.provision :file, :source => SSL_TARBALL_PATH, :destination => "/tmp/ssl.tar"
  config.vm.provision :shell, :inline => "mkdir -p /etc/kubernetes/ssl && tar -C /etc/kubernetes/ssl -xf /tmp/ssl.tar", :privileged => true

  config.vm.provision :file, :source => USER_DATA_PATH, :destination => "/tmp/vagrantfile-user-data"
  config.vm.provision :shell, :inline => "mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/", :privileged => true

  # add insecure registry for local container registry
  config.vm.provision :shell, :inline => "sudo cp /usr/lib/systemd/system/docker.service /etc/systemd/system/", :privileged => true
  config.vm.provision :shell, :inline => "sudo sed -e $\"/^ExecStart/ s/$/ --insecure-registry lcr.lh/\" -i /etc/systemd/system/docker.service", :privileged => true
  config.vm.provision :shell, :inline => "sudo systemctl daemon-reload", :privileged => true
  config.vm.provision :shell, :inline => "sudo systemctl restart docker", :privileged => true
end

#rsync --verbose --archive --delete -z --copy-links --chmod=ugo=rwX --no-perms --no-owner --no-group --rsync-path sudo rsync -e ssh -p 2200 -o ControlMaster=auto -o ControlPath=C:/Users/micha/AppData/Local/Temp/ssh.297 -o ControlPersist=10m -o StrictH ostKeyChecking=no -o IdentitiesOnly=true -o UserKnownHostsFile=/dev/null -i 'C:/Users/micha/.vagrant.d/insecure_private_key' - -exclude .vagrant/ /c/Users/micha/Projects/limres-coreos-kubernetes/single-node/ core@127.0.0.1:/vagrant
